name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.25]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run gofmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet (internal with vet tag)
      run: go vet -tags vet ./internal

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run

    - name: Run tests (exclude examples; vet tag)
      run: |
        pkgs=$(go list ./... | grep -v "/examples")
        go test -tags vet -v -coverprofile=coverage.out $pkgs

    - name: Verify examples compile (vet tag)
      run: |
        for example in examples/*.go; do \
          echo "Checking $example..."; \
          go build -tags vet -o /dev/null "$example"; \
        done

    - name: Run benchmarks (internal; vet tag; main only)
      if: github.ref == 'refs/heads/main'
      run: go test -tags vet -bench=. -benchmem ./internal

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
