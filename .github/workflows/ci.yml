name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.25]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet (internal with vet tag)
        run: go vet -tags vet ./internal

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.4.0
          args: --timeout=5m --build-tags=vet --out-format=github-actions

      - name: Run tests (exclude examples; vet tag)
        run: |
          pkgs=$(go list ./... | grep -v "/examples")
          go test -tags vet -v -coverprofile=coverage.out $pkgs

      - name: Verify examples compile (vet tag)
        run: |
          for example in examples/*.go; do \
            echo "Checking $example..."; \
            go build -tags vet -o /dev/null "$example"; \
          done

      - name: Install gosec (optional)
        continue-on-error: true
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Security scan (optional)
        continue-on-error: true
        run: |
          if command -v gosec >/dev/null 2>&1; then \
            echo "Running gosec (optional)"; \
            gosec ./...; \
          else \
            echo "gosec not installed, skipping"; \
          fi

      - name: Run benchmarks (internal; vet tag; main only)
        if: github.ref == 'refs/heads/main'
        run: go test -tags vet -bench=. -benchmem ./internal

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
